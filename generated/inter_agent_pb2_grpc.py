# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import inter_agent_pb2 as inter__agent__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in inter_agent_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class InterAgentServiceStub(object):
    """
    NOTE: This file is for inter-agent RPCs that are not directly related to the main services.
    These RPCs are used for health checks, monitoring, or other auxiliary tasks that agents may need to perform.

    - Only use unary RPCs in this file.
    - Any other RPCs will be resulted in authentication errors.

    This RPC's are meant to be used in inter-agent communication, But controlplane is also allowed to use these RPCs.

    Requirement for RPC method:
    - Must be unary RPCs.
    - Each request should container a field `cluster_id`  to identify the cluster on server end.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestRsyncAccess = channel.unary_unary(
                '/rds.InterAgentService/RequestRsyncAccess',
                request_serializer=inter__agent__pb2.RequestRsyncAccessRequest.SerializeToString,
                response_deserializer=inter__agent__pb2.RequestRsyncAccessResponse.FromString,
                _registered_method=True)
        self.RevokeRsyncAccess = channel.unary_unary(
                '/rds.InterAgentService/RevokeRsyncAccess',
                request_serializer=inter__agent__pb2.RevokeRsyncAccessRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.SyncReplicationUser = channel.unary_unary(
                '/rds.InterAgentService/SyncReplicationUser',
                request_serializer=inter__agent__pb2.SyncReplicationUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class InterAgentServiceServicer(object):
    """
    NOTE: This file is for inter-agent RPCs that are not directly related to the main services.
    These RPCs are used for health checks, monitoring, or other auxiliary tasks that agents may need to perform.

    - Only use unary RPCs in this file.
    - Any other RPCs will be resulted in authentication errors.

    This RPC's are meant to be used in inter-agent communication, But controlplane is also allowed to use these RPCs.

    Requirement for RPC method:
    - Must be unary RPCs.
    - Each request should container a field `cluster_id`  to identify the cluster on server end.

    """

    def RequestRsyncAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeRsyncAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncReplicationUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InterAgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestRsyncAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestRsyncAccess,
                    request_deserializer=inter__agent__pb2.RequestRsyncAccessRequest.FromString,
                    response_serializer=inter__agent__pb2.RequestRsyncAccessResponse.SerializeToString,
            ),
            'RevokeRsyncAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeRsyncAccess,
                    request_deserializer=inter__agent__pb2.RevokeRsyncAccessRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SyncReplicationUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncReplicationUser,
                    request_deserializer=inter__agent__pb2.SyncReplicationUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rds.InterAgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rds.InterAgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InterAgentService(object):
    """
    NOTE: This file is for inter-agent RPCs that are not directly related to the main services.
    These RPCs are used for health checks, monitoring, or other auxiliary tasks that agents may need to perform.

    - Only use unary RPCs in this file.
    - Any other RPCs will be resulted in authentication errors.

    This RPC's are meant to be used in inter-agent communication, But controlplane is also allowed to use these RPCs.

    Requirement for RPC method:
    - Must be unary RPCs.
    - Each request should container a field `cluster_id`  to identify the cluster on server end.

    """

    @staticmethod
    def RequestRsyncAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.InterAgentService/RequestRsyncAccess',
            inter__agent__pb2.RequestRsyncAccessRequest.SerializeToString,
            inter__agent__pb2.RequestRsyncAccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevokeRsyncAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.InterAgentService/RevokeRsyncAccess',
            inter__agent__pb2.RevokeRsyncAccessRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncReplicationUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.InterAgentService/SyncReplicationUser',
            inter__agent__pb2.SyncReplicationUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
