# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and agent classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import common_pb2 as common__pb2
from . import mysql_pb2 as mysql__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mysql_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MySQLServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/rds.MySQLService/Create',
                request_serializer=mysql__pb2.MySQLCreateRequest.SerializeToString,
                response_deserializer=mysql__pb2.MySQLInfoResponse.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/rds.MySQLService/Get',
                request_serializer=mysql__pb2.MySQLIdRequest.SerializeToString,
                response_deserializer=mysql__pb2.MySQLInfoResponse.FromString,
                _registered_method=True)
        self.Status = channel.unary_unary(
                '/rds.MySQLService/Status',
                request_serializer=mysql__pb2.MySQLIdRequest.SerializeToString,
                response_deserializer=mysql__pb2.MySQLStatusResponse.FromString,
                _registered_method=True)
        self.Start = channel.unary_unary(
                '/rds.MySQLService/Start',
                request_serializer=mysql__pb2.MySQLIdRequest.SerializeToString,
                response_deserializer=mysql__pb2.MySQLStatusResponse.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/rds.MySQLService/Stop',
                request_serializer=mysql__pb2.MySQLIdRequest.SerializeToString,
                response_deserializer=mysql__pb2.MySQLStatusResponse.FromString,
                _registered_method=True)
        self.Restart = channel.unary_unary(
                '/rds.MySQLService/Restart',
                request_serializer=mysql__pb2.MySQLIdRequest.SerializeToString,
                response_deserializer=mysql__pb2.MySQLStatusResponse.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/rds.MySQLService/Delete',
                request_serializer=mysql__pb2.MySQLIdRequest.SerializeToString,
                response_deserializer=mysql__pb2.MySQLDeleteResponse.FromString,
                _registered_method=True)
        self.Upgrade = channel.unary_unary(
                '/rds.MySQLService/Upgrade',
                request_serializer=mysql__pb2.MySQLUpgradeRequest.SerializeToString,
                response_deserializer=mysql__pb2.MySQLInfoResponse.FromString,
                _registered_method=True)
        self.SetupReplica = channel.unary_unary(
                '/rds.MySQLService/SetupReplica',
                request_serializer=mysql__pb2.MySQLIdRequest.SerializeToString,
                response_deserializer=mysql__pb2.MySQLInfoResponse.FromString,
                _registered_method=True)
        self.SyncReplicationUser = channel.unary_unary(
                '/rds.MySQLService/SyncReplicationUser',
                request_serializer=mysql__pb2.MySQLIdRequest.SerializeToString,
                response_deserializer=common__pb2.EmptyResponseWithMeta.FromString,
                _registered_method=True)


class MySQLServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upgrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetupReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncReplicationUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MySQLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=mysql__pb2.MySQLCreateRequest.FromString,
                    response_serializer=mysql__pb2.MySQLInfoResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=mysql__pb2.MySQLIdRequest.FromString,
                    response_serializer=mysql__pb2.MySQLInfoResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=mysql__pb2.MySQLIdRequest.FromString,
                    response_serializer=mysql__pb2.MySQLStatusResponse.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=mysql__pb2.MySQLIdRequest.FromString,
                    response_serializer=mysql__pb2.MySQLStatusResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=mysql__pb2.MySQLIdRequest.FromString,
                    response_serializer=mysql__pb2.MySQLStatusResponse.SerializeToString,
            ),
            'Restart': grpc.unary_unary_rpc_method_handler(
                    servicer.Restart,
                    request_deserializer=mysql__pb2.MySQLIdRequest.FromString,
                    response_serializer=mysql__pb2.MySQLStatusResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=mysql__pb2.MySQLIdRequest.FromString,
                    response_serializer=mysql__pb2.MySQLDeleteResponse.SerializeToString,
            ),
            'Upgrade': grpc.unary_unary_rpc_method_handler(
                    servicer.Upgrade,
                    request_deserializer=mysql__pb2.MySQLUpgradeRequest.FromString,
                    response_serializer=mysql__pb2.MySQLInfoResponse.SerializeToString,
            ),
            'SetupReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupReplica,
                    request_deserializer=mysql__pb2.MySQLIdRequest.FromString,
                    response_serializer=mysql__pb2.MySQLInfoResponse.SerializeToString,
            ),
            'SyncReplicationUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncReplicationUser,
                    request_deserializer=mysql__pb2.MySQLIdRequest.FromString,
                    response_serializer=common__pb2.EmptyResponseWithMeta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rds.MySQLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rds.MySQLService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MySQLService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/Create',
            mysql__pb2.MySQLCreateRequest.SerializeToString,
            mysql__pb2.MySQLInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/Get',
            mysql__pb2.MySQLIdRequest.SerializeToString,
            mysql__pb2.MySQLInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/Status',
            mysql__pb2.MySQLIdRequest.SerializeToString,
            mysql__pb2.MySQLStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/Start',
            mysql__pb2.MySQLIdRequest.SerializeToString,
            mysql__pb2.MySQLStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/Stop',
            mysql__pb2.MySQLIdRequest.SerializeToString,
            mysql__pb2.MySQLStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/Restart',
            mysql__pb2.MySQLIdRequest.SerializeToString,
            mysql__pb2.MySQLStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/Delete',
            mysql__pb2.MySQLIdRequest.SerializeToString,
            mysql__pb2.MySQLDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Upgrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/Upgrade',
            mysql__pb2.MySQLUpgradeRequest.SerializeToString,
            mysql__pb2.MySQLInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetupReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/SetupReplica',
            mysql__pb2.MySQLIdRequest.SerializeToString,
            mysql__pb2.MySQLInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncReplicationUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rds.MySQLService/SyncReplicationUser',
            mysql__pb2.MySQLIdRequest.SerializeToString,
            common__pb2.EmptyResponseWithMeta.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
